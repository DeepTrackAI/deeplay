from typing import Literal, Type, Union, Optional, overload
from deeplay.components.mlp import MultiLayerPerceptron as MultiLayerPerceptron
from deeplay.external.layer import Layer as Layer

def normed_leaky(mlp: MultiLayerPerceptron): ...

class SmallMLP(MultiLayerPerceptron):
    def __init__(self, in_features, out_features) -> None: ...
    @overload
    def style(self, style: Literal["normed_leaky"], ) -> Self: ...
    def style(self, style: str, **kwargs) -> Self: ...

class MediumMLP(MultiLayerPerceptron):
    def __init__(self, in_features, out_features) -> None: ...
    @overload
    def style(self, style: Literal["normed_leaky"], ) -> Self: ...
    def style(self, style: str, **kwargs) -> Self: ...

class LargeMLP(MultiLayerPerceptron):
    def __init__(self, in_features, out_features) -> None: ...
    @overload
    def style(self, style: Literal["normed_leaky"], ) -> Self: ...
    def style(self, style: str, **kwargs) -> Self: ...

class XLargeMLP(MultiLayerPerceptron):
    @overload
    def style(self, style: Literal["normed_leaky"], ) -> Self: ...
    def style(self, style: str, **kwargs) -> Self: ...
    def __init__(self, in_features, out_features) -> None: ...
